#ifndef __MERGESORT__
#define __MERGESORT__

#include<algorithm>

#pragma warning(disable: 4996)

template<typename T>
void __insertionSort(T arr[], int l, int r){

	for (int i = l + 1; i <= r; i++){
		T e = arr[i];
		int j;
		for (j = i; j > l && e < arr[j - 1]; j--)
			arr[j] = arr[j - 1];
		arr[j] = e;
	}

}

template<typename T>
void __merge(T arr[], int l, int mid, int r){
	
	T *aux = new T[r - l + 1];			//暂存数组
	for (int j = l; j <= r; j++)
		aux[j - l] = arr[j];

	int i = l, j = mid + 1;
	for (int k = l; k <= r; k++){
		if (i > mid){
			arr[k] = aux[j - l];
			j++;
		}
		else if (j > r){
			arr[k] = aux[i - l];
			i++;
		}
		else if (aux[i - l] < aux[j - l]){
			arr[k] = aux[i - l];
			i++;
		}
		else{
			arr[k] = aux[j - l];
			j++;
		}
	}
}

template<typename T>
void __mergeSort(T arr[], int l, int r){

	if (r - l < 16){
		__insertionSort(arr, l, r);
		return;
	}
	int mid = (l + r) / 2;
	__mergeSort(arr, l, mid);
	__mergeSort(arr, mid + 1, r);
	if (arr[mid + 1] < arr[mid])
		__merge(arr, l, mid, r);

}


template<typename T>
void mergeSort(T arr[], int n){

	__mergeSort(arr, 0, n-1);

}

template<typename T>
void mergeSortBU(T arr[], int n){

	for (int sz = 1; sz < n; sz += sz){
		for (int i = 0; i  < n; i += sz + sz)		//i只起到传递sz的作用
			__merge(arr, i, i + sz - 1, min(i + sz + sz - 1, n - 1));
	}
}



#endif //__MERGESORT__
